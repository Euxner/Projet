<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="100" name="MOTOR"/>
<constant value="500" name="SEUIL"/>
<constant value="0" name="CHANGE"/>
<constant value="1000" name="TIMER0"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># Thymio II : How fast is Thymio
# Projet par N.Mojon

# declaration des constante
# MOTOR puissance du moteur
# SEUIL	Seuil quand thymio detect le tape


var state 		#0 = off, 1 = find , 2 = skip ,3 = straight
var time 		# compte le temps
call sound.system(-1)

sub intitiate
motor.left.target = 0
motor.right.target = 0
state = 0
time = 0
timer.period[0] = TIMER0
state = 1


sub find

motor.left.target = 10
motor.right.target = 10

	if  prox.ground.reflected[0] &lt; SEUIL and prox.ground.reflected[1] &lt; SEUIL then
		motor.left.target = 0
		motor.right.target = 0
	end
	
state = 2

sub skip

motor.left.target = MOTOR
motor.right.target = MOTOR

	if  prox.ground.reflected[0] > SEUIL and prox.ground.reflected[1] &lt; SEUIL then
		motor.left.speed = -MOTOR
		motor.right.speed = -MOTOR
		
		while prox.ground.reflected[0] > SEUIL and prox.ground.reflected[1] &lt; SEUIL do
			motor.left.target = MOTOR
			motor.right.target = -MOTOR
		end
		
		motor.left.target = MOTOR
		motor.right.target = MOTOR
		
	elseif  prox.ground.reflected[0] &lt; SEUIL and prox.ground.reflected[1] > SEUIL then
		motor.left.target = -MOTOR
		motor.right.target = -MOTOR
		
		while prox.ground.reflected[0] &lt; SEUIL and prox.ground.reflected[1] > SEUIL do
			motor.left.target = -MOTOR
			motor.right.target = MOTOR
		end
		
		motor.left.target = MOTOR
		motor.right.target = MOTOR
	
	
	elseif  prox.ground.reflected[0] > SEUIL and prox.ground.reflected[1] > SEUIL then
		motor.left.target = -MOTOR
		motor.right.target = MOTOR
		#state = 3
	end

#sub straight

	#motor.left.target = MOTOR
	#motor.right.target = MOTOR
	

########################################################################################################################

onevent button.center
	if  button.center == 1 then
		callsub intitiate
		call leds.top(32,0,0)
end

onevent timer0

	if  state == 1 then

		callsub find
		call leds.circle(5,0,0,0,0,0,0,0)

	elseif state == 2 then
	
		callsub skip
		call leds.circle(5,5,0,0,0,0,0,0)

#	elseif state == 3 then
#
#		callsub straight
#		call leds.circle(5,5,5,0,0,0,0,0)
#
	end

onevent button.backward
	if button.backward == 1 then
		motor.left.target = 0
		motor.right.target = 0
		state = 9
		call leds.circle(0,0,0,0,0,0,0,0)
		call leds.top(0,0,0)		
	end</node>


</network>

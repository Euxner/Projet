<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="1" name="rx"/>
<event size="1" name="tx"/>


<!--list of constants-->
<constant value="2500" name="PROXHORIZONTALE"/>
<constant value="150" name="MOTOR"/>
<constant value="100" name="TIMER0"/>
<constant value="1000" name="TIMER1"/>
<constant value="0" name="INITIALISE"/>
<constant value="1" name="BALLADE"/>
<constant value="2" name="LANGUE"/>
<constant value="3" name="EMOTIONS"/>
<constant value="4" name="ACTIVITE"/>
<constant value="5" name="CATCHME"/>
<constant value="6" name="DANCE"/>
<constant value="7" name="POSTBALLADE"/>
<constant value="9" name="PAUSE"/>
<constant value="1" name="TRUE"/>
<constant value="0" name="FALSE"/>
<constant value="1" name="FRANCAIS"/>
<constant value="2" name="ALLEMAND"/>
<constant value="4" name="ANGLAIS"/>
<constant value="500" name="DETECT"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># Thymio II : Dialogue robotique avec le robot Thymio II
# Projet par N.Mojon ETML

# declaration des constante
# TIMER0 = Vitesse du timer 0
# TIMER1 = Vitesse du timer 1

var Son = 0 # Delai pour la transmission des couleurs.
var Lumiere = 0 # Variable pour savoir si les lampes sont allumées ou non.
var Identifiant = 1
var Etat = 0
var EtatPause = -1
var LangueParlee = 0
var LangueRecue = 0
var i = 0
var LangueRecueBinaire[3]
var LangueParleeBinaire[3]
var ChoixLangue = 0
var DifferenceVitesse = 0
var VitesseBase=150
var speed_l=0
var max = 0
var mi = 0
var t = 0
var NActivite = 0
var Reponse = 0
var Initiateur = 0
var DelaiTransmission = 0
var DelaiRep = 0
var DelaiAct = 0
var Parle = FALSE
var PostBallade = 0
var Rencontre = 0
call sound.system(-1)
call prox.comm.enable(1)
call leds.top (0,0,0)
call leds.circle (0,0,0,0,0,0,0,0)
timer.period[0] = 0
timer.period[1] = 0


################################################

sub Initialisation

Son = 0
Lumiere = 0
prox.comm.rx = 0
prox.comm.tx = 0
motor.left.target = 0
motor.right.target = 0
Etat = 0
EtatPause = -1
LangueParlee = FRANCAIS + ALLEMAND
LangueRecue = 0
i = 0
LangueRecueBinaire = [0,0,0]
LangueParleeBinaire = [0,0,0]
ChoixLangue = 0
DifferenceVitesse = 0
VitesseBase=0
speed_l=0
max = 0
mi = 0
t = 0
NActivite = 0
Reponse = 0
Initiateur = 0
DelaiTransmission = 0
DelaiRep = 0
DelaiAct = 0
call leds.top (0,0,0)
Parle = FALSE
PostBallade = 0
Rencontre = 0
call leds.circle (0,0,0,0,0,0,0,0)

################################################

sub Ballade # mode ballade

	timer.period[1] = 0
	PostBallade = 0
	prox.comm.tx = Identifiant

	while  prox.horizontal[4] > PROXHORIZONTALE or prox.horizontal[3] > PROXHORIZONTALE or prox.horizontal[2] > PROXHORIZONTALE do
		motor.left.target = -MOTOR
		motor.right.target = MOTOR
	end
	
	while  prox.horizontal[0] > PROXHORIZONTALE or prox.horizontal[2] > PROXHORIZONTALE do
		motor.left.target = MOTOR
		motor.right.target = -MOTOR
	end
	 
	if prox.horizontal[2] == 0 or prox.horizontal[0] == 0 or prox.horizontal[4] == 0 then 
		motor.left.target = MOTOR
		motor.right.target = MOTOR
	end
	
	if  prox.comm.rx != 0  and prox.horizontal[2] >= 2000 then
		prox.comm.tx = LangueParlee
		motor.left.target = 0
		motor.right.target = 0
		Etat = 2
	end

################################################

sub BinaireLangue

i = 0

while LangueRecue != 0 do
	LangueRecueBinaire[i] = LangueRecue%2
	LangueRecue = LangueRecue/2
	i++
end

i = 0

while LangueParlee != 0 do
	LangueParleeBinaire[i] = LangueParlee%2
	LangueParlee = LangueParlee/2
	i++
end

################################################

sub ChoixLangue

i = 0

while LangueParleeBinaire[i] == LangueRecueBinaire[i] do
	ChoixLangue = i
	i++
end

when ChoixLangue == 0 do #son fr
#	call sound.play(1)
end

when ChoixLangue == 1 do # son all
#	call sound.play(3)
end

when ChoixLangue == 2 do # son angs
#	call sound.play(2)
end

Etat = 3
################################################

sub Langue

LangueRecue = prox.comm.rx

#call sound.play(2)

callsub BinaireLangue
callsub ChoixLangue

################################################

sub ChoixActivité

call math.rand(NActivite)

if  NActivite &lt; 0 then
	NActivite = -NActivite
end

NActivite = NActivite%2

################################################

sub RepActivite

call math.rand(Reponse)

if  Reponse &lt; 0 then
	Reponse = -Reponse
end

Reponse = Reponse%3

################################################

sub PostBallade

timer.period[1] = TIMER1

while PostBallade != 10  do
	while  prox.horizontal[4] > PROXHORIZONTALE or prox.horizontal[3] > PROXHORIZONTALE or prox.horizontal[2] > PROXHORIZONTALE do
		motor.left.target = -MOTOR
		motor.right.target = MOTOR
	end
	
	while  prox.horizontal[0] > PROXHORIZONTALE or prox.horizontal[2] > PROXHORIZONTALE do
		motor.left.target = MOTOR
		motor.right.target = -MOTOR
	end
	 
	if prox.horizontal[2] == 0 or prox.horizontal[0] == 0 or prox.horizontal[4] == 0 then 
		motor.left.target = MOTOR
		motor.right.target = MOTOR
	end
end

if  PostBallade == 10 then
	Etat = 1
	Rencontre++
	call leds.top(0,0,0)
end
	
################################################

sub Emotions

if  Parle == FALSE then
	#call sound.play(1) #bjr
prox.comm.tx = 1
call leds.top(32,32,32) # blanc
Parle = TRUE
end

if  DelaiTransmission > 20 then
	
	when Etat == 3 and prox.comm.rx == 1 do
#		call sound.play(1) #bjr
		prox.comm.tx = 2
		call leds.top(32,32,32) # blanc
	end
	
	if DelaiTransmission > 40 then
	
		when Etat == 3 and prox.comm.rx == 2 do
			Initiateur = TRUE
			callsub ChoixActivité
			if NActivite == 1 then
#				call sound.play(7) # Chat ?
			else
#				call sound.play(8) # Dance ?
			end
			prox.comm.tx = 3
			call leds.top(0,0,32) # bleu
		end
				
		if  DelaiTransmission > 60 then
			if  DelaiRep > 20 then
				if  Etat == 3 and prox.comm.rx == 3 then
					callsub RepActivite
					
					if Reponse == 0  then
#						call sound.play(4) # OK
						Etat = 4
						prox.comm.tx = 5
						call leds.top(0,32,0)#vert
					elseif Reponse == 1 then
#						call sound.play(5) # N/A
						prox.comm.tx = 2
						call leds.top(32,32,0) #jaune
					elseif Reponse == 2 then
#						call sound.play(6) # NO
						Etat = 7
						call leds.top(32,0,0) #rouge
						prox.comm.tx = 6
#						call sound.play(10) # Aureveoir
					end
				end
			DelaiRep = 0
			end
			
			
			when prox.comm.rx == 6 and Etat == 3 do
				Etat = 7
				prox.comm.tx = 0
				call leds.top(0,32,32) #violet
			end
			
			when prox.comm.rx == 5 and Etat == 3 do
				Etat = 4
				prox.comm.tx = NActivite
				call leds.top(32,0,32) #violet
			end
		end
	end
end

DelaiTransmission++
DelaiRep++

################################################

sub CatchMe

VitesseBase=MOTOR

max = prox.horizontal[0]
	mi = 0
	speed_l=0
	for i in 0:4 do 
		if prox.horizontal[i]> max then
			max = prox.horizontal[i]
			mi = i
		end
	end
	
	t = 2 - mi
	DifferenceVitesse = t * (VitesseBase / 2)
	if max > 3500 then
		speed_l = (3500 - max) / 2
	end
	if (max > 4000) then
		speed_l = -VitesseBase 
	end
	if (max &lt; 3000) then
		t = 300 - (max - 1000) / 7
		speed_l = t
	end
	
	if (max &lt; 2000) then
		speed_l = VitesseBase 
	end
	
	if(speed_l > VitesseBase) then
		speed_l = VitesseBase
	end
	if(speed_l &lt; -VitesseBase) then
		speed_l = -VitesseBase
	end
	
	if(max &lt; DETECT) then
		motor.left.target = 0
		motor.right.target = 0
	 else 
		motor.right.target = DifferenceVitesse + speed_l
		motor.left.target = speed_l - DifferenceVitesse
	 end

################################################

sub Dance

call leds.top(0,0,0)
call leds.circle(8,8,8,8,8,8,8,8)

################################################

sub Activite

if Initiateur == 1 and DelaiAct > 50 then
	if  NActivite == 1 then
		callsub Ballade
	else
		Etat = 6
	end
elseif DelaiAct > 50  then
	if  prox.comm.rx == 1 and Etat == 4 then
		Etat = 5			
	else 
		Etat = 6
	end
end

DelaiAct++

################################################

sub Pause #Mise en pause du robot
	
	if  EtatPause == -1 then
		EtatPause = Etat
	Etat = PAUSE
		if  motor.left.target != 0 then
		motor.left.target = 0
		motor.right.target = 0
		end
	else
		Etat = EtatPause
		EtatPause = -1	
	end
################################################

onevent button.forward #activation du mode ballade

callsub Initialisation
timer.period[0] = TIMER0

################################################

onevent button.backward #Reset

callsub Initialisation
timer.period[0] = 0

################################################

onevent button.center #Active le mode pause

if button.center == 1 then
	callsub Pause
end

################################################

onevent button.left

when  button.left == 1 do

	if  Lumiere == TRUE then
		Lumiere = FALSE

	else
		Lumiere = TRUE
	end
end

################################################

onevent button.right


when  button.right == 1 do
	if Son == TRUE then
		Son = FALSE
	else 
		Son = TRUE
#		call sound.system(2)
	end
end

################################################

onevent timer0

if  Etat == INITIALISE then
	callsub Initialisation
	Etat = 1
elseif Etat == BALLADE then
	callsub Ballade
elseif Etat == LANGUE then
	callsub Langue
elseif Etat == EMOTIONS then
	callsub Emotions
elseif Etat == ACTIVITE then
	callsub Activite
elseif  Etat == CATCHME then
	callsub CatchMe
elseif  Etat == DANCE then
	callsub Dance
elseif  Etat == POSTBALLADE then
	callsub PostBallade
end 

onevent timer1

PostBallade++</node>


</network>

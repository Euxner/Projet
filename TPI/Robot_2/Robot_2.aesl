<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="2500" name="PROXHORIZONTALE"/>
<constant value="100" name="MOTOR"/>
<constant value="100" name="TIMER0"/>
<constant value="0" name="INITIALISE"/>
<constant value="1" name="BALLADE"/>
<constant value="2" name="LANGUE"/>
<constant value="3" name="ACTIVITE"/>
<constant value="9" name="PAUSE"/>
<constant value="1" name="TRUE"/>
<constant value="0" name="FALSE"/>
<constant value="1" name="FRANCAIS"/>
<constant value="2" name="ALLEMAND"/>
<constant value="4" name="ANGLAIS"/>
<constant value="500" name="DETECT"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II"># Thymio II : Dialogue robotique avec le robot Thymio II
# Projet par N.Mojon ETML

# declaration des constante
# TIMER0 = Vitesse du timer 0
# TIMER1 = Vitesse du timer 1

var Son = 0 # Delai pour la transmission des couleurs.
var Lumiere = 0 # Variable pour savoir si les lampes sont allumÃ©es ou non.
var Identifiant = 2
var Etat = 0
var EtatPause = -1
var LangueParlee = 0
var LangueRecue = 0
var i = 0
var LangueRecueBinaire[3]
var LangueParleeBinaire[3]
var ChoixLangue = 0
var speed_diff
var speed=150
var speed_l=0
var max
var mi
var t
call sound.system(-1)
call prox.comm.enable(1)
call leds.top (0,0,0)
call leds.circle (0,0,0,0,0,0,0,0)
timer.period[0] = 0


################################################

sub Initialisation

Son = 0
Lumiere = 0
prox.comm.rx = 0
prox.comm.tx = 0
motor.left.target = 0
motor.right.target = 0
Etat = 0
EtatPause = -1
LangueParlee = FRANCAIS + ANGLAIS
LangueRecue = 0
i = 0
LangueRecueBinaire = [0,0,0]
LangueParleeBinaire = [0,0,0]
ChoixLangue = 0
speed_diff = 0
speed=0
speed_l=0
max = 0
mi = 0
t = 0

################################################

sub Ballade # mode ballade

	prox.comm.tx = Identifiant

	while  prox.horizontal[4] > PROXHORIZONTALE or prox.horizontal[3] > PROXHORIZONTALE or prox.horizontal[2] > PROXHORIZONTALE do
		motor.left.target = -MOTOR
		motor.right.target = MOTOR
	end
	
	while  prox.horizontal[0] > PROXHORIZONTALE or prox.horizontal[2] > PROXHORIZONTALE do
		motor.left.target = MOTOR
		motor.right.target = -MOTOR
	end
	 
	if prox.horizontal[2] == 0 or prox.horizontal[0] == 0 or prox.horizontal[4] == 0 then 
		motor.left.target = MOTOR
		motor.right.target = MOTOR
	end
	
	if  prox.comm.rx != 0  and prox.horizontal[2] >= 2000 then
		motor.left.target = 0
		motor.right.target = 0
		prox.comm.tx = LangueParlee
		Etat = 2
	end

################################################

sub BinaireLangue

i = 0

while LangueRecue != 0 do
	LangueRecueBinaire[i] = LangueRecue%2
	LangueRecue = LangueRecue/2
	i++
end

i = 0

while LangueParlee != 0 do
	LangueParleeBinaire[i] = LangueParlee%2
	LangueParlee = LangueParlee/2
	i++
end

################################################

sub ChoixLangue

i = 0

while LangueParleeBinaire[i] == LangueRecueBinaire[i] do
	ChoixLangue = i
	i++
end

when ChoixLangue == 0 do #son fr
	call sound.play(1)
end

when ChoixLangue == 1 do # son all
	call sound.play(3)
end

when ChoixLangue == 2 do # son angs
	call sound.play(2)
end

Etat = 3
################################################

sub Langue

LangueRecue = prox.comm.rx

callsub BinaireLangue
callsub ChoixLangue

################################################

sub Activite



################################################

sub CatchMe

speed=MOTOR

max = prox.horizontal[0]
	mi = 0
	speed_l=0
	for i in 0:4 do 
		if prox.horizontal[i]> max then
			max = prox.horizontal[i]
			mi = i
		end
	end
	
	t = 2 - mi
	speed_diff = t * (speed / 2)
	if max > 3500 then
		speed_l = (3500 - max) / 2
	end
	if (max > 4000) then
		speed_l = -speed 
	end
	if (max &lt; 3000) then
		t = 300 - (max - 1000) / 7
		speed_l = t
	end
	
	if (max &lt; 2000) then
		speed_l = speed 
	end
	
	if(speed_l > speed) then
		speed_l = speed
	end
	if(speed_l &lt; -speed) then
		speed_l = -speed
	end
	
	if(max &lt; DETECT) then
		motor.left.target = 0
		motor.right.target = 0
	 else 
		motor.right.target = speed_diff + speed_l
		motor.left.target = speed_l - speed_diff
	 end

################################################

sub Dance



################################################

sub Pause #Mise en pause du robot
	
	if  EtatPause == -1 then
		EtatPause = Etat
	Etat = PAUSE
		if  motor.left.target != 0 then
		motor.left.target = 0
		motor.right.target = 0
		end
	else
		Etat = EtatPause
		EtatPause = -1	
	end
################################################

onevent button.forward #activation du mode ballade

callsub Initialisation
timer.period[0] = TIMER0


################################################

onevent button.backward #Reset

callsub Initialisation
timer.period[0] = 0

################################################

onevent button.center #Active le mode pause

if button.center == 1 then
	callsub Pause
end

################################################

onevent button.left

when  button.left == 1 do

	if  Lumiere == TRUE then
		Lumiere = FALSE

	else
		Lumiere = TRUE
	end
end

################################################

onevent button.right


when  button.right == 1 do
	if Son == TRUE then
		Son = FALSE
	else 
		Son = TRUE
		call sound.system(2)
	end
end

################################################

onevent timer0

if  Etat == INITIALISE then
	callsub Initialisation
	Etat = 1
elseif Etat == BALLADE then
	callsub Ballade
elseif Etat == LANGUE then
	callsub Langue
elseif Etat == ACTIVITE then
	callsub Activite
end 

</node>


</network>
